name: Deploy RevCopy to Production

on:
  push:
    branches: [main, production]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            admin/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Backend Dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Admin Dependencies
        run: |
          cd admin
          npm ci

      - name: Run Backend Tests
        run: |
          cd backend
          python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm run test:ci

      - name: Run Admin Tests
        run: |
          cd admin
          npm run test:ci

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        id: build
        uses: docker/bake-action@v4
        with:
          files: |
            ./docker-compose.yml
            ./docker-compose.override.yml
          targets: |
            backend
            frontend
            admin
            amazon-crawler
          push: true
          set: |
            *.tags=${{ steps.meta.outputs.tags }}
            *.labels=${{ steps.meta.outputs.labels }}

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.APP_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ vars.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory
        run: |
          ssh ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} "
            sudo mkdir -p /opt/revcopy-deployment
            sudo chown ${{ vars.SSH_USER }}:${{ vars.SSH_USER }} /opt/revcopy-deployment
          "

      - name: Copy deployment files
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='__pycache__' \
            --exclude='.env*' \
            ./ ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }}:/opt/revcopy-deployment/

      - name: Create environment file
        run: |
          ssh ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} "
            cat > /opt/revcopy-deployment/.env << 'EOF'
          # Production Environment Configuration
          ENVIRONMENT=production
          DEBUG=false
          
          # Database Configuration
          POSTGRES_HOST=postgres
          POSTGRES_PORT=5432
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          
          # Redis Configuration
          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          
          # Security Keys
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          API_SECRET_KEY=${{ secrets.API_SECRET_KEY }}
          
          # API Keys
          DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          
          # Application URLs
          BACKEND_URL=http://backend:8000
          FRONTEND_URL=https://${{ vars.DOMAIN }}
          ADMIN_URL=https://${{ vars.DOMAIN }}/admin
          CRAWLER_URL=http://amazon-crawler:8080
          
          # Monitoring
          GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
          GRAFANA_SECRET_KEY=${{ secrets.GRAFANA_SECRET_KEY }}
          
          # Domain
          DOMAIN=${{ vars.DOMAIN }}
          EOF
          "

      - name: Deploy with Docker Compose
        run: |
          ssh ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} "
            cd /opt/revcopy-deployment
            
            # Pull latest images
            docker-compose pull
            
            # Build and deploy
            docker-compose up -d --build --remove-orphans
            
            # Wait for services to be ready
            sleep 30
            
            # Check service health
            docker-compose ps
          "

      - name: Run health checks
        run: |
          ssh ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} "
            cd /opt/revcopy-deployment
            
            # Backend health check
            curl -f http://localhost:8000/health || exit 1
            
            # Frontend health check  
            curl -f http://localhost:5173/health || exit 1
            
            # Admin health check
            curl -f http://localhost:3001/health || exit 1
            
            echo 'All services are healthy!'
          "

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id,
              state: status,
              environment_url: '${{ vars.APP_URL }}',
              description: status === 'success' ? 
                `Successfully deployed to ${environment}` : 
                `Failed to deploy to ${environment}`
            });

  rollback:
    if: failure()
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        run: |
          ssh ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} "
            cd /opt/revcopy-deployment
            
            # Get previous successful deployment
            PREVIOUS_TAG=\$(docker images --format 'table {{.Repository}}:{{.Tag}}' | grep revcopy | head -2 | tail -1 | cut -d':' -f2)
            
            if [ ! -z \"\$PREVIOUS_TAG\" ]; then
              echo 'Rolling back to: \$PREVIOUS_TAG'
              
              # Update docker-compose to use previous tag
              sed -i \"s|:latest|:\$PREVIOUS_TAG|g\" docker-compose.yml
              
              # Deploy previous version
              docker-compose up -d --no-build
              
              echo 'Rollback completed'
            else
              echo 'No previous version found for rollback'
              exit 1
            fi
          " 