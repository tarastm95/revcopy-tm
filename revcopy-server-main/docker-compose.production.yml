version: '3.8'

# RevCopy Production Docker Compose Configuration
# Follows international DevOps and container orchestration best practices

networks:
  revcopy-internal:
    driver: bridge
    internal: false
  revcopy-backend:
    driver: bridge
    internal: true

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/revcopy/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/revcopy/data/redis
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/revcopy/data/grafana
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/revcopy/data/prometheus
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/nginx

services:
  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: revcopy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - revcopy-internal
    depends_on:
      - backend
      - frontend
      - admin
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: revcopy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./configs/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./scripts/postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    networks:
      - revcopy-backend
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: revcopy-redis
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - revcopy-backend
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Backend API
  backend:
    build:
      context: ../revcopy-backend-main
      dockerfile: ../revcopy-server-main/dockerfiles/Dockerfile.backend
      target: production
    image: revcopy/backend:${VERSION:-latest}
    container_name: revcopy-backend
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CRAWLER_URL=http://amazon-crawler:8080
    volumes:
      - ./backend/uploads:/app/uploads
      - ./scripts/backend-entrypoint.sh:/app/entrypoint.sh:ro
    networks:
      - revcopy-internal
      - revcopy-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Frontend Application
  frontend:
    build:
      context: ../revcopy-frontend-main
      dockerfile: ../revcopy-server-main/dockerfiles/Dockerfile.frontend
      target: production
    image: revcopy/frontend:${VERSION:-latest}
    container_name: revcopy-frontend
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=${BACKEND_URL}
      - VITE_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - ./configs/nginx/frontend.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - revcopy-internal
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Admin Panel
  admin:
    build:
      context: ../revcopy-admin-main
      dockerfile: ../revcopy-server-main/dockerfiles/Dockerfile.admin
      target: production
    image: revcopy/admin:${VERSION:-latest}
    container_name: revcopy-admin
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=${BACKEND_URL}
      - VITE_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - ./configs/nginx/admin.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - revcopy-internal
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Amazon Crawler Service
  amazon-crawler:
    build:
      context: ../revcopy-crawlers-api-main/amazon
      dockerfile: ../revcopy-server-main/dockerfiles/Dockerfile.crawler
      target: production
    image: revcopy/amazon-crawler:${VERSION:-latest}
    container_name: revcopy-amazon-crawler
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - revcopy-internal
      - revcopy-backend
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: revcopy-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - revcopy-internal
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: revcopy-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - revcopy-internal
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Monitoring - Node Exporter
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: revcopy-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - revcopy-internal
    ports:
      - "9100:9100"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Monitoring - cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: revcopy-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    networks:
      - revcopy-internal
    ports:
      - "8080:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Production-specific configurations
x-common-deploy: &common-deploy
  restart_policy:
    condition: unless-stopped
    delay: 5s
    max_attempts: 3
    window: 120s

x-common-logging: &common-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3" 